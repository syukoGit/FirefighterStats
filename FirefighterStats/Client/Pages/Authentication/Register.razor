@using FirefighterStats.Client.Components
@using FirefighterStats.Client.Components.Inputs
@using FirefighterStats.Client.Extensions
@using FirefighterStats.Client.Services
@using FirefighterStats.Shared.Authentication
@using FirefighterStats.Shared.Firefighter
@page "/authentication/register"

@layout AuthenticationLayout

@inject AuthenticationService AuthenticationService
@inject NavigationManager Navigation

<div class="page-content">
    <div class="form-wrapper">
        <h1>Register</h1>

        @if (_error != null)
        {
            <ul class="errors">
                <li>@_error</li>
            </ul>
        }

        <EditForm Model="_registerDTO"
                  OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>

            <CustomInputText @bind-Value="_registerDTO.FirstName"
                             id="first-name-input"
                             ValidationFor="() => _registerDTO.FirstName"
                             Label="First name"/>
            
            <CustomInputText @bind-Value="_registerDTO.LastName"
                             id="last-name-input"
                             ValidationFor="() => _registerDTO.LastName"
                             Label="Last name"/>
            
            <CustomInputText @bind-Value="_registerDTO.UserName"
                             id="username-input"
                             ValidationFor="() => _registerDTO.UserName"
                             Label="Username"/>
            
            <CustomInputText @bind-Value="_registerDTO.Password"
                             id="password-input"
                             ValidationFor="() => _registerDTO.Password"
                             Label="Password"
                             type="password"/>
            
            <CustomInputText @bind-Value="_registerDTO.ConfirmPassword"
                             id="confirm-password-input"
                             ValidationFor="() => _registerDTO.ConfirmPassword"
                             Label="Confirm password"
                             type="password"/>

            <Accordion Title="Optional informations"
                       class="accordion-optional-info">
                <CustomInputDate @bind-Value="_registerDTO.CareerStartDate"
                                 id="career-start-data-input"
                                 Label="Career start date"
                                 ValidationFor="() => _registerDTO.CareerStartDate"/>

                <CustomInputText @bind-Value="_registerDTO.FireStation"
                                 id="fire-station-input"
                                 Label="FirefighterCard station"
                                 ValidationFor="() => _registerDTO.FireStation"/>
                                 
                <CustomInputSelect @bind-Value="_registerDTO.Rank"
                                   TValue="EFirefighterRank"
                                   id="firefighter-rank-input"
                                   Label="FirefighterCard rank"
                                   ValidationFor="() => _registerDTO.Rank">
                    @foreach (EFirefighterRank rank in Enum.GetValues(typeof(EFirefighterRank)))
                    {
                        <option value="@rank">@rank.GetDisplayName()</option>
                    }
                </CustomInputSelect>
                
                <CustomInputText @bind-Value="_registerDTO.RegistrationNumber"
                                   id="registration-number-input"
                                   Label="Registration Number"
                                   ValidationFor="() => _registerDTO.RegistrationNumber"/>
            </Accordion>

            <div class="buttons">
                <button type="submit">Register</button>
                <element class="vertical-divider"/>
                <div class="link-to-register">
                    <p>Already have an account?</p>
                    <a onclick="@RedirectToLogin">Sign in</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private readonly RegisterDTO _registerDTO = new ();

    private string? _error;

    private async Task HandleValidSubmit()
    {
        _error = null;

        try
        {
            string? error = await AuthenticationService.Register(_registerDTO);

            if (string.IsNullOrEmpty(error))
            {
                Navigation.NavigateTo(ReturnUrl ?? "/");
            }
            else
            {
                _error = error;
            }
        }
        catch (ApplicationException ex)
        {
            _error = ex.Message;
        }
    }

    private void RedirectToLogin()
    {
        var uri = "authentication/login";

        if (!string.IsNullOrWhiteSpace(ReturnUrl))
        {
            uri += $"?returnUrl={ReturnUrl}";
        }

        Navigation.NavigateTo(uri);
    }
}
