@using System.Globalization
@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions

@inherits InputBase<DateTime?>

<div class="input-group">
    <input class="input @CssClass" id="@_id" type="date" @bind="@CurrentValue" @attributes="@AdditionalAttributes"/>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="placeholder" for="@_id">@Label</label>
    }
    @if (ValidationFor != null)
    {
        <ValidationMessage For="@ValidationFor"></ValidationMessage>
    }
</div>

@code {

    private const string DateFormat = "yyyy-MM-dd";

    private object? _id;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Expression<Func<DateTime?>>? ValidationFor { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        AdditionalAttributes?.TryGetValue("id", out _id);
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, out DateTime? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (value == null)
        {
            result = null;
            validationErrorMessage = null;
            return true;
        }

        if (DateTime.TryParseExact(value, DateFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime date))
        {
            result = date;
            validationErrorMessage = null;
            return true;
        }

        result = null;
        validationErrorMessage = "Unable to parse date";
        return false;
    }

}
