@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@using System.ComponentModel

@typeparam TValue where TValue : struct
@inherits InputBase<TValue?>

<div class="input-group">
    <select class="input @CssClass"
            id="@_id"
            @bind="@CurrentValue"
            @attributes="@AdditionalAttributes">
        @ChildContent
    </select>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="placeholder" for="@_id">@Label</label>
    }
    @if (ValidationFor != null)
    {
        <ValidationMessage For="@ValidationFor"></ValidationMessage>
    }
</div>

@code
{

    private object? _id;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Expression<Func<TValue?>>? ValidationFor { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        AdditionalAttributes?.TryGetValue("id", out _id);
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, out TValue? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (value == null)
        {
            result = null;
            validationErrorMessage = null;
            return true;
        }

        if (typeof(TValue) == typeof(Enum))
        {
            TypeConverter converter = TypeDescriptor.GetConverter(typeof(TValue));
            result = (TValue?) converter.ConvertFromInvariantString(null, value);
            validationErrorMessage = null;
            return true;
        }

        result = null;
        validationErrorMessage = "type not supported";
        return false;
    }
}
